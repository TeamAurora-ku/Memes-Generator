# -*- coding: utf-8 -*-
"""python_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1urHFM54Lnzrm4-dYyUa8u-SCYUVOvAqA
"""

# Meme Caption Generator for Google Colab with Two-Image Support
# Install required packages
!pip install pillow ipywidgets

import os
import io
import base64
import numpy as np
from PIL import Image, ImageDraw, ImageFont
from IPython.display import display, HTML, Image as IPImage
from google.colab import files
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import clear_output
import random

# Global variables to store state
uploaded_images = []
meme_image = None
meme_layout = "side_by_side"  # Default layout

# Sample captions for memes - no need for GPT-2 which causes the error
sample_captions = [
    "When you realize it's Monday again",
    "Nobody: \nAbsolutely nobody:",
    "Me explaining to my mom why I need a new laptop",
    "Friend: What film should we watch tonight?",
    "My brain during an exam vs My brain at 3am",
    "What I ordered vs What I received",
    "How I think I look vs How I actually look",
    "Expectations vs Reality",
    "Before coffee vs After coffee",
    "Me trying to explain my code",
    "When the code finally works but you don't know why",
    "When you find the bug after 5 hours",
    "That moment when you realize your mistake",
    "When the professor says the exam is easy",
    "My code vs Stack Overflow code",
    "Week 1 of the semester vs Week 15",
    "5 year old me vs Me now"
]

def generate_random_captions():
    """Generate random captions from our predefined list"""
    # Shuffle the captions and take the first 5
    shuffled = random.sample(sample_captions, min(5, len(sample_captions)))
    return shuffled

def add_caption_to_image(image, caption, position="top"):
    """Add caption text to the image with adaptive font size"""
    img = image.copy()
    draw = ImageDraw.Draw(img)
    width, height = img.size

    # Try to load a better font if available
    try:
        # Try to get a better font if available in Colab
        !wget -q -O impact.ttf https://github.com/google/fonts/raw/main/apache/roboto/static/Roboto-Bold.ttf
        font_path = "impact.ttf"
        # Adaptive font size based on image dimensions
        font_size = int(min(width, height) / 8)  # More reasonable size ratio
        font = ImageFont.truetype(font_path, font_size)
    except:
        # Fallback to default font with better sizing
        font = ImageFont.load_default()
        # Default font is small, so we'll use a larger size
        font_size = int(min(width, height) / 8)

    # Text properties
    text_color = (255, 255, 255)  # White
    stroke_color = (0, 0, 0)      # Black
    stroke_width = max(1, int(font_size / 15))  # Proportional stroke width

    # Calculate position
    if position == "top":
        text_position = (width * 0.05, height * 0.05)
    elif position == "bottom":
        text_position = (width * 0.05, height * 0.75)
    elif position == "center":
        text_position = (width * 0.05, height * 0.4)

    # Calculate text size to wrap text
    # Adaptive chars_per_line based on font size
    chars_per_line = int(width / (font_size * 0.6))  # Adjusted for better wrapping
    words = caption.split()
    lines = []
    current_line = []

    for word in words:
        if len(' '.join(current_line + [word])) <= chars_per_line:
            current_line.append(word)
        else:
            lines.append(' '.join(current_line))
            current_line = [word]

    if current_line:
        lines.append(' '.join(current_line))

    # Draw each line
    y_position = text_position[1]
    for line in lines:
        # Calculate text width for centering
        text_width = font_size * len(line) * 0.6  # Approximate width
        text_x = (width - text_width) / 2 if text_width < width else text_position[0]

        # Draw stroke first (outline for better visibility)
        for adj in range(-stroke_width, stroke_width + 1):
            for adj2 in range(-stroke_width, stroke_width + 1):
                if abs(adj) + abs(adj2) == stroke_width:  # Just draw the outline
                    draw.text((text_x + adj, y_position + adj2), line, font=font, fill=stroke_color)

        # Draw text
        draw.text((text_x, y_position), line, font=font, fill=text_color)

        # Increase line spacing based on font size
        y_position += font_size * 1.2

    return img

def create_two_image_meme(image1, image2, caption1="", caption2="", layout="side_by_side"):
    """Create a meme with two images and captions"""
    # Ensure both images have the same height for side-by-side layout
    # or same width for top-bottom layout
    if layout == "side_by_side":
        # Calculate target height (average of both images)
        target_height = int((image1.height + image2.height) / 2)

        # Resize maintaining aspect ratio
        img1 = image1.copy()
        img2 = image2.copy()

        # Calculate new widths maintaining aspect ratio
        new_width1 = int((target_height / img1.height) * img1.width)
        new_width2 = int((target_height / img2.height) * img2.width)

        # Resize images
        img1 = img1.resize((new_width1, target_height), Image.LANCZOS)
        img2 = img2.resize((new_width2, target_height), Image.LANCZOS)

        # Create a new blank image
        total_width = new_width1 + new_width2
        result = Image.new('RGB', (total_width, target_height))

        # Paste the images side by side
        result.paste(img1, (0, 0))
        result.paste(img2, (new_width1, 0))

        # Add captions if provided
        if caption1:
            img1 = add_caption_to_image(img1, caption1, "center")
            result.paste(img1, (0, 0))

        if caption2:
            img2 = add_caption_to_image(img2, caption2, "center")
            result.paste(img2, (new_width1, 0))

    else:  # top_bottom layout
        # Calculate target width (average of both images)
        target_width = int((image1.width + image2.width) / 2)

        # Resize maintaining aspect ratio
        img1 = image1.copy()
        img2 = image2.copy()

        # Calculate new heights maintaining aspect ratio
        new_height1 = int((target_width / img1.width) * img1.height)
        new_height2 = int((target_width / img2.width) * img2.height)

        # Resize images
        img1 = img1.resize((target_width, new_height1), Image.LANCZOS)
        img2 = img2.resize((target_width, new_height2), Image.LANCZOS)

        # Create a new blank image
        total_height = new_height1 + new_height2
        result = Image.new('RGB', (target_width, total_height))

        # Paste the images top-bottom
        result.paste(img1, (0, 0))
        result.paste(img2, (0, new_height1))

        # Add captions if provided
        if caption1:
            img1 = add_caption_to_image(img1, caption1, "center")
            result.paste(img1, (0, 0))

        if caption2:
            img2 = add_caption_to_image(img2, caption2, "center")
            result.paste(img2, (0, new_height1))

    return result

def save_meme(b):
    """Save and download the meme"""
    global meme_image
    if meme_image:
        save_path = "my_meme.jpg"
        meme_image.save(save_path)
        files.download(save_path)

def handle_upload(change):
    """Process uploaded images"""
    global uploaded_images

    # Clear previous outputs
    clear_output(wait=True)

    # Display title
    display(HTML("<h1 style='color:#4285F4;'>Two-Image Meme Generator</h1>"))

    # Process uploaded files
    uploaded_files = change.new
    if not uploaded_files:
        display(HTML("<p>No files uploaded. Please upload images.</p>"))
        return

    # Read the files
    uploaded_images = []
    for filename, data in uploaded_files.items():
        content = data['content']
        try:
            img = Image.open(io.BytesIO(content))
            uploaded_images.append(img)
        except Exception as e:
            display(HTML(f"<p style='color:red'>Error opening image {filename}: {str(e)}</p>"))

    # Check if we have enough images
    if len(uploaded_images) < 2:
        display(HTML("<p style='color:orange'>Please upload at least 2 images for your meme.</p>"))
        # Reset upload widget
        upload_btn = widgets.FileUpload(
            accept='image/*',
            multiple=True,
            description='Upload Images',
            icon='upload'
        )
        upload_btn.observe(handle_upload, names='value')
        display(upload_btn)
        return
    elif len(uploaded_images) > 2:
        display(HTML("<p style='color:orange'>Only the first 2 images will be used.</p>"))
        uploaded_images = uploaded_images[:2]

    # Display the images
    fig, axes = plt.subplots(1, 2, figsize=(12, 6))
    axes[0].imshow(np.array(uploaded_images[0]))
    axes[0].set_title("Image 1")
    axes[0].axis('off')

    axes[1].imshow(np.array(uploaded_images[1]))
    axes[1].set_title("Image 2")
    axes[1].axis('off')

    plt.tight_layout()
    plt.show()

    # Create layout selection
    layout_radio = widgets.RadioButtons(
        options=[('Side by Side', 'side_by_side'), ('Top and Bottom', 'top_bottom')],
        value='side_by_side',
        description='Layout:',
        disabled=False
    )

    # Caption fields
    caption1 = widgets.Text(
        value='',
        placeholder='Caption for first image',
        description='Caption 1:',
        disabled=False
    )

    caption2 = widgets.Text(
        value='',
        placeholder='Caption for second image',
        description='Caption 2:',
        disabled=False
    )

    # Generate captions button
    generate_btn = widgets.Button(
        description='Generate AI Captions',
        button_style='primary',
        tooltip='Click to generate funny captions',
        icon='magic'
    )

    # Create meme button
    create_btn = widgets.Button(
        description='Create Meme',
        button_style='success',
        tooltip='Click to create your meme',
        icon='check'
    )

    # Function to handle caption generation
    def generate_captions_handler(b):
        with caption_output:
            clear_output()
            display(HTML("<p>Generating captions... Please wait.</p>"))

            # Generate captions
            captions = generate_random_captions()

            # Display caption options
            clear_output()
            display(HTML("<h3>Suggested captions:</h3>"))
            for i, cap in enumerate(captions):
                display(HTML(f"<p><b>{i+1}.</b> {cap}</p>"))

            # Add buttons to select captions
            display(HTML("<h4>Select for Image 1:</h4>"))
            buttons1 = widgets.HBox([widgets.Button(description=str(i+1)) for i in range(len(captions))])
            display(buttons1)

            display(HTML("<h4>Select for Image 2:</h4>"))
            buttons2 = widgets.HBox([widgets.Button(description=str(i+1)) for i in range(len(captions))])
            display(buttons2)

            # Set up button callbacks
            for i, btn in enumerate(buttons1.children):
                btn.on_click(lambda b, i=i: caption1.set_trait('value', captions[i]))

            for i, btn in enumerate(buttons2.children):
                btn.on_click(lambda b, i=i: caption2.set_trait('value', captions[i]))

    # Function to create the meme
    def create_meme_handler(b):
        global uploaded_images, meme_image, meme_layout

        # Get layout
        meme_layout = layout_radio.value

        # Get captions
        cap1 = caption1.value
        cap2 = caption2.value

        # Create meme
        meme_image = create_two_image_meme(uploaded_images[0], uploaded_images[1], cap1, cap2, meme_layout)

        # Clear outputs
        clear_output(wait=True)

        # Display title
        display(HTML("<h1 style='color:#4285F4;'>Two-Image Meme Generator</h1>"))

        # Display the meme
        plt.figure(figsize=(12, 8))
        plt.imshow(np.array(meme_image))
        plt.axis('off')
        plt.title("Your Meme")
        plt.show()

        # Create download button
        download_btn = widgets.Button(
            description='Download Meme',
            button_style='info',
            tooltip='Click to download your meme',
            icon='download'
        )
        download_btn.on_click(save_meme)

        # Create new meme button
        new_btn = widgets.Button(
            description='Create Another',
            button_style='warning',
            tooltip='Click to create another meme',
            icon='refresh'
        )
        new_btn.on_click(lambda b: start_over())

        # Display buttons
        display(widgets.HBox([download_btn, new_btn]))

    # Attach handlers
    generate_btn.on_click(generate_captions_handler)
    create_btn.on_click(create_meme_handler)

    # Create output area for captions
    caption_output = widgets.Output()

    # Display widgets
    display(layout_radio)
    display(caption1)
    display(caption2)
    display(widgets.HBox([generate_btn, create_btn]))
    display(caption_output)

def start_over():
    """Start over with new images"""
    global uploaded_images, meme_image

    # Reset variables
    uploaded_images = []
    meme_image = None

    # Clear outputs
    clear_output(wait=True)

    # Display title and start again
    create_interface()

def create_interface():
    """Create the main interface"""
    # Display title
    display(HTML("<h1 style='color:#4285F4;'>Two-Image Meme Generator</h1>"))
    display(HTML("<p>Upload two images to create a funny meme with captions!</p>"))

    # Create upload button
    upload_btn = widgets.FileUpload(
        accept='image/*',
        multiple=True,
        description='Upload Images',
        icon='upload'
    )
    upload_btn.observe(handle_upload, names='value')

    # Display upload button
    display(upload_btn)

# Create the initial interface
create_interface()