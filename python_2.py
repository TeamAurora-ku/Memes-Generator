# -*- coding: utf-8 -*-
"""python_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v0-kt50NBfdUfVm3DE-U_hik0JniiQIF
"""

# Meme Caption Generator for Google Colab
# Install required packages
!pip install transformers pillow

import os
import io
import base64
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import torch
from transformers import GPT2Tokenizer, GPT2LMHeadModel
from IPython.display import display, HTML, Image as IPImage
from google.colab import files
import matplotlib.pyplot as plt

# Load GPT-2 model and tokenizer
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
model = GPT2LMHeadModel.from_pretrained('gpt2')
model.eval()  # Set model to evaluation mode

def generate_captions(image_context="a random image"):
    """Generate meme captions using GPT-2"""
    # Basic prompt engineering for humor
    prompts = [
        f"This meme shows {image_context}. A funny caption would be:",
        f"Looking at {image_context}, the perfect meme caption is:",
        f"The funniest caption for a meme about {image_context} would be:",
        f"A witty caption for {image_context} could be:",
        f"In a meme about {image_context}, the text would say:"
    ]

    captions = []

    for prompt in prompts:
        # Encode prompt
        input_ids = tokenizer.encode(prompt, return_tensors='pt')

        # Generate caption
        output = model.generate(
            input_ids,
            max_length=50,
            num_return_sequences=1,
            temperature=0.9,
            top_k=50,
            top_p=0.95,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

        # Decode and clean up output
        caption = tokenizer.decode(output[0], skip_special_tokens=True)
        caption = caption.replace(prompt, '').strip()

        # Split on common punctuation to get just the first sentence
        for char in ['.', '!', '?']:
            if char in caption:
                caption = caption.split(char)[0] + char
                break

        captions.append(caption)

    return captions

def add_caption_to_image(image, caption, position="top"):
    """Add caption text to the image"""
    img = image.copy()
    draw = ImageDraw.Draw(img)
    width, height = img.size

    # Try to use a common meme font, fallback to default
    try:
        # Colab might not have Impact font, so we use a default font
        font = ImageFont.load_default()
        # For better results, adjust the font size
        font_size = int(height / 12)
    except IOError:
        font = ImageFont.load_default()

    # Text properties
    text_color = (255, 255, 255)  # White
    stroke_color = (0, 0, 0)      # Black
    stroke_width = 1

    # Calculate position
    if position == "top":
        text_position = (width * 0.1, height * 0.05)
    else:  # bottom
        text_position = (width * 0.1, height * 0.85)

    # Calculate text size to wrap text
    chars_per_line = int(width / (font_size * 0.6))
    words = caption.split()
    lines = []
    current_line = []

    for word in words:
        if len(' '.join(current_line + [word])) <= chars_per_line:
            current_line.append(word)
        else:
            lines.append(' '.join(current_line))
            current_line = [word]

    if current_line:
        lines.append(' '.join(current_line))

    # Draw each line
    y_position = text_position[1]
    for line in lines:
        # Draw stroke first
        for adj in range(-stroke_width, stroke_width + 1):
            for adj2 in range(-stroke_width, stroke_width + 1):
                draw.text((text_position[0] + adj, y_position + adj2), line, fill=stroke_color)

        # Draw text
        draw.text((text_position[0], y_position), line, fill=text_color)
        y_position += font_size * 1.2

    return img

# Function to upload image and display captions
def create_meme():
    print("Upload an image to generate funny captions:")
    uploaded = files.upload()

    if not uploaded:
        print("No file was uploaded.")
        return

    # Process the uploaded image
    image_file = list(uploaded.keys())[0]
    image = Image.open(io.BytesIO(uploaded[image_file]))

    # Display the original image
    plt.figure(figsize=(10, 8))
    plt.imshow(np.array(image))
    plt.axis('off')
    plt.title("Uploaded Image")
    plt.show()

    # Generate captions
    print("Generating captions...")
    captions = generate_captions()

    # Display captions
    print("\nðŸŽ­ Generated Captions:")
    for i, caption in enumerate(captions, 1):
        print(f"{i}. {caption}")

    # Let user choose a caption
    selected_idx = int(input("\nSelect caption number (1-5) or enter 0 to type your own: "))

    if selected_idx == 0:
        selected_caption = input("Enter your custom caption: ")
    else:
        selected_caption = captions[selected_idx-1]

    # Let user choose position
    position = input("Place caption at 'top' or 'bottom'? [top]: ") or "top"

    # Generate meme
    meme_image = add_caption_to_image(image, selected_caption, position)

    # Display the final meme
    plt.figure(figsize=(10, 8))
    plt.imshow(np.array(meme_image))
    plt.axis('off')
    plt.title("Your Meme")
    plt.show()

    # Save meme
    save_path = f"meme_{image_file}"
    meme_image.save(save_path)
    files.download(save_path)
    print(f"Your meme has been saved and is ready for download as '{save_path}'")

    # Option to create another meme with the same image
    another = input("\nCreate another meme with this image? (y/n): ")
    if another.lower() == 'y':
        # Generate new captions
        print("Generating new captions...")
        new_captions = generate_captions()

        # Display new captions
        print("\nðŸŽ­ New Generated Captions:")
        for i, caption in enumerate(new_captions, 1):
            print(f"{i}. {caption}")

        # Let user choose a caption
        selected_idx = int(input("\nSelect caption number (1-5) or enter 0 to type your own: "))

        if selected_idx == 0:
            selected_caption = input("Enter your custom caption: ")
        else:
            selected_caption = new_captions[selected_idx-1]

        # Let user choose position
        position = input("Place caption at 'top' or 'bottom'? [top]: ") or "top"

        # Generate meme
        meme_image = add_caption_to_image(image, selected_caption, position)

        # Display the final meme
        plt.figure(figsize=(10, 8))
        plt.imshow(np.array(meme_image))
        plt.axis('off')
        plt.title("Your New Meme")
        plt.show()

        # Save meme
        save_path = f"meme2_{image_file}"
        meme_image.save(save_path)
        files.download(save_path)
        print(f"Your meme has been saved and is ready for download as '{save_path}'")

# Run the function to start the meme generator
create_meme()